// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

function $$eval(expr) {
  switch (expr.TAG | 0) {
    case /* Add */0 :
        return $$eval(expr._0) + $$eval(expr._1) | 0;
    case /* Mul */1 :
        return Math.imul($$eval(expr._0), $$eval(expr._1));
    case /* Cst */2 :
        return expr._0;
    
  }
}

var BigStep = {
  $$eval: $$eval
};

function $$eval$1(_instrs, _stack) {
  while(true) {
    var stack = _stack;
    var instrs = _instrs;
    if (instrs) {
      var i = instrs.hd;
      if (typeof i === "number") {
        if (i !== 0) {
          if (stack) {
            var match = stack.tl;
            if (match) {
              _stack = {
                hd: Math.imul(stack.hd, match.hd),
                tl: match.tl
              };
              _instrs = instrs.tl;
              continue ;
            }
            
          }
          
        } else if (stack) {
          var match$1 = stack.tl;
          if (match$1) {
            _stack = {
              hd: stack.hd + match$1.hd | 0,
              tl: match$1.tl
            };
            _instrs = instrs.tl;
            continue ;
          }
          
        }
        
      } else {
        _stack = {
          hd: i._0,
          tl: stack
        };
        _instrs = instrs.tl;
        continue ;
      }
    } else if (stack) {
      return stack.hd;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Lab.res",
            46,
            11
          ],
          Error: new Error()
        };
  };
}

var SmallStep = {
  $$eval: $$eval$1
};

function compile(src) {
  switch (src.TAG | 0) {
    case /* Add */0 :
        var target1 = compile(src._0);
        var target2 = compile(src._1);
        return Belt_List.concatMany([
                    target1,
                    target2,
                    {
                      hd: /* Add */0,
                      tl: /* [] */0
                    }
                  ]);
    case /* Mul */1 :
        var target1$1 = compile(src._0);
        var target2$1 = compile(src._1);
        return Belt_List.concatMany([
                    target1$1,
                    target2$1,
                    {
                      hd: /* Mul */1,
                      tl: /* [] */0
                    }
                  ]);
    case /* Cst */2 :
        return {
                hd: /* Cst */{
                  _0: src._0
                },
                tl: /* [] */0
              };
    
  }
}

var Compiler = {
  compile: compile
};

function tostring(expr) {
  switch (expr.TAG | 0) {
    case /* Add */0 :
        var expr1_str = tostring(expr._0);
        var expr2_str = tostring(expr._1);
        return "Add(" + expr1_str + ", " + expr2_str + ")";
    case /* Mul */1 :
        var expr1_str$1 = tostring(expr._0);
        var expr2_str$1 = tostring(expr._1);
        return "Mul(" + expr1_str$1 + ", " + expr2_str$1 + ")";
    case /* Cst */2 :
        return "Cst(" + expr._0 + ")";
    
  }
}

var ToString = {
  tostring: tostring
};

function check_compile(src) {
  var instrs = compile(src);
  var result = $$eval$1(instrs, /* [] */0);
  if (result === $$eval(src)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Lab.res",
          104,
          4
        ],
        Error: new Error()
      };
}

function test(param) {
  var tests = [
    {
      TAG: /* Cst */2,
      _0: 42
    },
    {
      TAG: /* Add */0,
      _0: {
        TAG: /* Cst */2,
        _0: 1
      },
      _1: {
        TAG: /* Cst */2,
        _0: 2
      }
    },
    {
      TAG: /* Mul */1,
      _0: {
        TAG: /* Cst */2,
        _0: 1
      },
      _1: {
        TAG: /* Cst */2,
        _0: 2
      }
    },
    {
      TAG: /* Add */0,
      _0: {
        TAG: /* Mul */1,
        _0: {
          TAG: /* Cst */2,
          _0: 1
        },
        _1: {
          TAG: /* Cst */2,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */2,
        _0: 3
      }
    },
    {
      TAG: /* Mul */1,
      _0: {
        TAG: /* Mul */1,
        _0: {
          TAG: /* Cst */2,
          _0: 1
        },
        _1: {
          TAG: /* Cst */2,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */2,
        _0: 3
      }
    }
  ];
  Belt_Array.forEachWithIndex(tests, (function (i, t) {
          check_compile(t);
          var expr_str = tostring(Caml_array.get(tests, i));
          console.log("Test " + expr_str + " pass...");
        }));
}

var Test = {
  check_compile: check_compile,
  test: test
};

test(undefined);

export {
  BigStep ,
  SmallStep ,
  Compiler ,
  ToString ,
  Test ,
}
/*  Not a pure module */
